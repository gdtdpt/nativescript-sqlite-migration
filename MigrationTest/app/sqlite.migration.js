"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DBMigration = (function () {
    function DBMigration() {
    }
    DBMigration.init = function (db, callback) {
        Migrator.setup(db, callback);
    };
    DBMigration.migrate = function (version, callback) {
        Migrator.migrate(version, callback);
    };
    DBMigration.defineMigration = function (version, actions) {
        Migrator.migration(version, actions);
    };
    return DBMigration;
}());
exports.DBMigration = DBMigration;
var Migrator = (function () {
    function Migrator() {
    }
    Migrator.version = function (callback) {
        var self = this;
        self.db.all('SELECT current_version FROM schema_version').then(function (result) {
            if (result.length == 0) {
                self.db.execSQL('INSERT INTO schema_version VALUES (0)').then(function (err, result) {
                    callback(0);
                });
            }
            else {
                callback(result[0][0]);
            }
        });
    };
    Migrator.setVersion = function (db, version, callback) {
        this.db.execSQL('UPDATE schema_version SET current_version = ?', [version]).then(function () {
            Migrator._version = version;
            if (callback)
                callback();
        });
    };
    Migrator.setup = function (db, callback) {
        var _this = this;
        this.db = db;
        db.execSQL('CREATE TABLE IF NOT EXISTS schema_version (current_version INTEGER)').then(function () {
            _this.migration(0, { up: function () { console.log('setup up.'); }, down: function () { console.log("setup down."); } });
            Migrator.migrations.forEach(function (migrationObj, index) {
                migrationObj.db = db;
            });
            if (callback)
                callback();
        });
    };
    Migrator.reset = function (callback) {
        Migrator.migrations = [];
        Migrator.setVersion(0, callback);
    };
    Migrator.migration = function (version, actions) {
        Migrator.migrations[version] = new Migration(version, actions);
        return Migrator.migrations[version];
    };
    Migrator.migrateUpTo = function (version, callback) {
        var migrationsToRun = [];
        function migrateOne() {
            var migration = migrationsToRun.pop();
            if (!migration)
                callback();
            migration.up(function () {
                if (migrationsToRun.length > 0) {
                    migrateOne();
                }
                else if (callback) {
                    callback();
                }
            });
        }
        this.version(function (currentVersion) {
            for (var v = currentVersion + 1; v <= version; v++) {
                migrationsToRun.unshift(Migrator.migrations[v]);
            }
            if (migrationsToRun.length > 0) {
                migrateOne();
            }
            else if (callback) {
                callback();
            }
        });
    };
    Migrator.migrateDownTo = function (version, callback) {
        var migrationsToRun = [];
        function migrateOne() {
            var migration = migrationsToRun.pop();
            if (!migration)
                callback();
            migration.down(function () {
                if (migrationsToRun.length > 0) {
                    migrateOne();
                }
                else if (callback) {
                    callback();
                }
            });
        }
        this.version(function (currentVersion) {
            for (var v = currentVersion - 1; v >= version; v--) {
                migrationsToRun.unshift(Migrator.migrations[v]);
            }
            if (migrationsToRun.length > 0) {
                migrateOne();
            }
            else if (callback) {
                callback();
            }
        });
    };
    Migrator.migrate = function (version, callback) {
        if (callback === undefined) {
            callback = version;
            version = this.migrations.length - 1;
        }
        this.version(function (currentVersion) {
            if (currentVersion < version) {
                Migrator.migrateUpTo(version, callback);
            }
            else if (currentVersion > version) {
                Migrator.migrateDownTo(version, callback);
            }
            else {
                callback();
            }
        });
    };
    return Migrator;
}());
Migrator.migrations = [];
var Migration = (function () {
    function Migration(version, body) {
        this.version = version;
        this.body = body;
        this.actions = [];
    }
    Migration.prototype.executeActions = function (callback, customVersion) {
        var actionsToRun = this.actions;
        var version = (customVersion !== undefined) ? customVersion : this.version;
        function nextAction(db) {
            if (actionsToRun.length == 0) {
                Migrator.setVersion(db, version, callback);
            }
            else {
                var action = actionsToRun.pop();
                action(db, nextAction);
            }
        }
        nextAction(this.db);
    };
    Migration.prototype.up = function (callback) {
        if (this.body.up)
            this.body.up.apply(this, [this]);
        this.executeActions(callback);
    };
    Migration.prototype.down = function (callback) {
        if (this.body.down)
            this.body.down.apply(this, [this]);
        this.executeActions(callback);
    };
    Migration.prototype.addColumn = function (tableName, columnName, columnType) {
        var sql = 'ALTER TABLE ' + tableName + ' ADD ' + columnName + ' ' + columnType;
        this.executeSql(sql);
    };
    Migration.prototype.removeColumn = function (tableName, columnName) {
        var self = this;
        this.action(function (db, nextCommand) {
            var sql = 'SELECT sql FROM sqlite_master WHERE type="table" AND name=="' + tableName + '"';
            db.all(sql).then(function (result) {
                var _start = result[0][0].indexOf('(');
                var _end = result[0][0].indexOf(')');
                var _tmp = result[0][0].substring(_start + 1, _end);
                var columns = _tmp.split(',');
                var selectColumns = [];
                var columnsSql = [];
                columns.forEach(function (column, index) {
                    var colName = new RegExp("((`\\w+`)|(\\w+)) .+").exec(column)[1].trim();
                    if (colName != columnName) {
                        columnsSql.push(column);
                        selectColumns.push(colName);
                    }
                });
                var columnsSqlStr = columnsSql.join(', ');
                var selectColumnsStr = selectColumns.join(', ');
                var queries = [];
                queries.unshift("ALTER TABLE " + tableName + " RENAME TO " + tableName + "_bkp;");
                queries.unshift("CREATE TABLE " + tableName + " (" + columnsSql + ");");
                queries.unshift("INSERT INTO " + tableName + " SELECT " + selectColumns + " FROM " + tableName + "_bkp;");
                queries.unshift("DROP TABLE " + tableName + "_bkp;");
                function executeQueriesSeq(queries, nextCommand) {
                    if (queries.length > 0) {
                        var sql_1 = queries.pop();
                        self.db.execSQL(sql_1).then(function () {
                            if (queries.length) {
                                executeQueriesSeq(queries, nextCommand);
                            }
                            else {
                                nextCommand();
                            }
                        });
                    }
                }
                executeQueriesSeq(queries, nextCommand);
            });
        });
    };
    Migration.prototype.addIndex = function (tableName, columnName, unique) {
        var sql = 'CREATE ' + (unique === true ? 'UNIQUE' : '') + ' INDEX ' + tableName + '_' + columnName + ' ON ' + tableName + ' (' + columnName + ')';
        this.executeSql(sql);
    };
    Migration.prototype.removeIndex = function (tableName, columnName) {
        var sql = 'DROP INDEX ' + tableName + '_' + columnName;
        this.executeSql(sql);
    };
    Migration.prototype.executeSql = function (sql, args) {
        this.action(function (db, nextCommand) {
            db.execSQL(sql, args).then(function () {
                nextCommand();
            });
        });
    };
    Migration.prototype.action = function (callback) {
        this.actions.unshift(callback);
    };
    return Migration;
}());
//# sourceMappingURL=data:application/json;base64,